// <auto-generated />
using System;
using Fri2Ends.Identity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(FIdentityContext))]
    [Migration("20210123200610_up-users")]
    partial class upusers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("AppFeatures", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FeatureTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ShurtDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureId");

                    b.ToTable("AppFeatures");
                });

            modelBuilder.Entity("AppSelectedFeatures", b =>
                {
                    b.Property<Guid>("SelectedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppFeaturesFeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppsAppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SelectedId");

                    b.HasIndex("AppFeaturesFeatureId");

                    b.HasIndex("AppsAppId");

                    b.ToTable("AppSelectedFeatures");
                });

            modelBuilder.Entity("Apps", b =>
                {
                    b.Property<Guid>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TokenType")
                        .HasColumnType("int");

                    b.HasKey("AppId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("LoginLogs", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemotePort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SetDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TokensTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogId");

                    b.HasIndex("TokensTokenId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnerId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("Roles", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SelectedRoles", b =>
                {
                    b.Property<int>("SelectedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RolesRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SelectedId");

                    b.HasIndex("RolesRoleId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("SelectedRoles");
                });

            modelBuilder.Entity("Tokens", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TokenKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("UserApps", b =>
                {
                    b.Property<Guid>("UserAppsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AppsAppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoindeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserAppsId");

                    b.HasIndex("AppsAppId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserApps");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AppsAppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserProfileImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AppsAppId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppSelectedFeatures", b =>
                {
                    b.HasOne("AppFeatures", "AppFeatures")
                        .WithMany("AppSelectedFeatures")
                        .HasForeignKey("AppFeaturesFeatureId");

                    b.HasOne("Apps", "Apps")
                        .WithMany("AppSelectedFeatures")
                        .HasForeignKey("AppsAppId");

                    b.Navigation("AppFeatures");

                    b.Navigation("Apps");
                });

            modelBuilder.Entity("Apps", b =>
                {
                    b.HasOne("Owner", "Owner")
                        .WithMany("Apps")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LoginLogs", b =>
                {
                    b.HasOne("Tokens", "Tokens")
                        .WithMany("LoginLogs")
                        .HasForeignKey("TokensTokenId");

                    b.HasOne("Users", "Users")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Tokens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.HasOne("Users", "Users")
                        .WithMany("Owner")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SelectedRoles", b =>
                {
                    b.HasOne("Roles", "Roles")
                        .WithMany("SelectedRoles")
                        .HasForeignKey("RolesRoleId");

                    b.HasOne("Users", "Users")
                        .WithMany("SelectedRoles")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Tokens", b =>
                {
                    b.HasOne("Users", "Users")
                        .WithMany("Tokens")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserApps", b =>
                {
                    b.HasOne("Apps", null)
                        .WithMany("UserApps")
                        .HasForeignKey("AppsAppId");

                    b.HasOne("Users", "Users")
                        .WithMany("UserApps")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.HasOne("Apps", "Apps")
                        .WithMany("Users")
                        .HasForeignKey("AppsAppId");

                    b.Navigation("Apps");
                });

            modelBuilder.Entity("AppFeatures", b =>
                {
                    b.Navigation("AppSelectedFeatures");
                });

            modelBuilder.Entity("Apps", b =>
                {
                    b.Navigation("AppSelectedFeatures");

                    b.Navigation("UserApps");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Owner", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("Roles", b =>
                {
                    b.Navigation("SelectedRoles");
                });

            modelBuilder.Entity("Tokens", b =>
                {
                    b.Navigation("LoginLogs");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Navigation("LoginLogs");

                    b.Navigation("Owner");

                    b.Navigation("SelectedRoles");

                    b.Navigation("Tokens");

                    b.Navigation("UserApps");
                });
#pragma warning restore 612, 618
        }
    }
}
